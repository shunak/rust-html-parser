// use clap::Parser;


// // Simple program to greet a person
// #[derive(Parser, Debug)]
// // #[clap(
// //     name = "My RPN program",
// //     version = "1.0.0",
// //     author = "Your name",
// //     about = "Super awesome sample RPN calculator"
// // )]
// #[clap(
//     author = "Shunak",
//     version = "1.0.0",
//     about = "Studying Rust",
//     long_about = None
//     )]
// struct Args {
//    // Name of the person to greet
//    #[clap(short, long, value_parser)]
//    name: String,

//    // Number of times to greet
//    #[clap(short, long, value_parser, default_value_t = 1)]
//    count: u8,
// }

// fn main() {
//    let args = Args::parse();

//    for _ in 0..args.count {
//        println!("Hello {}!", args.name)
//    }
// }

use error_chain::error_chain;
use select::document::Document;
use select::predicate::Name;
use std::fs::File;
use std::io::{self, Read, Write, BufReader};

error_chain! {
      foreign_links {
          ReqError(reqwest::Error);
          IoError(std::io::Error);
      }
}

#[tokio::main]
async fn main() -> Result<()> {
  let res = reqwest::get("https://newsdig.tbs.co.jp/list/latest")
    .await?
    .text()
    .await?;

  Document::from(res.as_str())
    .find(Name("a"))
    .filter_map(|n| n.attr("href"))
    .for_each(|x| println!("{}", x));

  Ok(())
}


